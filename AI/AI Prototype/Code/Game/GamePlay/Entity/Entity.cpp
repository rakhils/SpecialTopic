#include "Entity.hpp"
#include "Engine/Renderer/Materials/Material.hpp"
#include "Engine/Net/NetSession.hpp"

#include "Game/GamePlay/Maps/Map.hpp"
#include "Game/GameCommon.hpp"

Entity::Entity(Vector2 position)
{
	m_disc2D.center = position;
	Init();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/12/12
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Entity::Init()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/09/01
*@purpose : Process all inputs
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Entity::ProcessInputs(float deltaTime)
{
	UNUSED(deltaTime);

}

void Entity::Update(float deltaTime)
{
	if(m_health <= 0)
	{
		return;
	}
}

void Entity::Render()
{
	if (m_health <= 0)
	{
		return;
	}
	Vector2 nose = m_position + m_forward;
	Vector2 leftPosition = m_position + m_forward*
}


void Entity::SetMap(Map *map)
{
	m_map = map;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/12/12
*@purpose : Reduces health by damage amount
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Entity::TakeDamage(float healthReduction)
{
	m_health -= healthReduction;
	if(m_health <= 0)
	{

	}
}
