#include "Engine/AI/GA/Gene.hpp"
#include "Engine/Math/MathUtil.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/15
*@purpose : Checks if both object are equal
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Gene::operator==(const Gene &obj) const
{
	if(m_char == obj.m_char)
	{
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Gene::Gene(float mutateChance)
{
	m_mutateChance = mutateChance;
	m_char = GetRandomCharacter();
}

Gene::Gene(const Gene& copy)
	: m_char( copy.m_char )
	, m_mutateChance( copy.m_mutateChance )
	, m_fitnessValue( copy.m_fitnessValue )
{

}

// DESTRUCTOR
Gene::~Gene()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/15
*@purpose : Mutate the current gene
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Gene::Mutate()
{
	if(GetRandomFloatZeroToOne() < m_mutateChance)
	{
		m_char = GetRandomCharacter();//GetRandomIntInRange(-5, 5);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/15
*@purpose : Clones the current object
*@param   : NIL
*@return  : Cloned object
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Gene* Gene::Clone()
{
	Gene* gene = new Gene(*this);
	return gene;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/15
*@purpose : Checks if the both objects are equal 
*@param   : Gene pointer
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Gene::IsAlmostEqual(Gene *gene)
{
	if (m_char == gene->m_char)
	{
		return true;
	}
	return false;
}
