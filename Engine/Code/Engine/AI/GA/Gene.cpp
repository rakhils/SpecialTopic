#include "Engine/AI/GA/Gene.hpp"
#include "Engine/Math/MathUtil.hpp"
#include "Engine/Core/EngineCommon.hpp"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Gene::Gene(float mutateChance)
{
	m_mutateChance = mutateChance;
}

Gene::Gene(const Gene& copy)
	: m_mutateChance( copy.m_mutateChance )
	, m_fitnessValue( copy.m_fitnessValue )
{

}

// DESTRUCTOR
Gene::~Gene()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/15
*@purpose : Checks if the both objects are equal 
*@param   : Gene pointer
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Gene::IsAlmostEqual(Gene *gene)
{
	UNUSED(gene);
	return false;
}
