#include "Engine/Time/StopWatch.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
StopWatch::StopWatch(Clock *ref_clock /*= nullptr*/)
{
	SetClock(ref_clock);
}

// DESTRUCTOR
StopWatch::~StopWatch()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void StopWatch::SetClock(Clock *ref_clock)
{
	m_clock = ref_clock;
	m_start = m_clock->total.m_hpcSeconds;
	//m_start_hpc = ref_clock->frame.m_hpc;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool StopWatch::SetTimer(float seconds)
{
	m_interval = (double)seconds;
	m_originalInterval = (double)seconds;
	//m_interval_hpc = SecondsToPerformanceCounter(seconds);
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float StopWatch::GetElapsedTime()
{
	return 0.f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool StopWatch::HasElapsed()
{
	if(m_interval < 0)
	{
		return true;
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void StopWatch::Reset()
{
	m_start = m_clock->total.m_hpcSeconds;
	m_interval = m_originalInterval;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool StopWatch::CheckAndReset()
{
	if(HasElapsed())
	{
		Reset();
		return true;
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/06/06
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool StopWatch::Decrement()
{
	m_interval -= m_clock->frame.m_seconds;
	if(HasElapsed())
	{
		return true;
	}
	return false;
}
