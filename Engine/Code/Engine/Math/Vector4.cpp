#include "Vector4.hpp"
#include "Engine/Core/StringUtils.hpp"
Vector4 Vector4::ZERO = Vector4(0, 0, 0,0);
Vector4 Vector4::ONE = Vector4(1, 1, 1,1);
Vector4::Vector4(float xval, float yval, float zval, float wval)
{
	x = xval;
	y = yval;
	z = zval;
	w = wval;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Vector4::Vector4(Vector3 value)
{
	x = value.x;
	y = value.y;
	z = value.z;
	w = 0.f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Vector4::Vector4(Vector2 value)
{
	x = value.x;
	y = value.y;
	z = 0;
	w = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Vector4::Vector4(std::string text)
{
	SetFromText(text.c_str());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Vector4::Vector4(Vector3 value,float wval)
{
	x = value.x;
	y = value.y;
	z = value.z;
	w = wval;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Vector4::operator+=(const Vector4& VectorToAdd)
{
	x += VectorToAdd.x;
	y += VectorToAdd.y;
	z += VectorToAdd.z;
	w += VectorToAdd.w;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Vector4::operator-=(const Vector4& vecToSubtract)
{
	x -= vecToSubtract.x;
	y -= vecToSubtract.y;
	z -= vecToSubtract.z;
	w -= vecToSubtract.w;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const Vector4 Vector4::operator/(float uniformScale)
{
	return Vector4(x/uniformScale, y/uniformScale, z/uniformScale, w/uniformScale);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const Vector4 Vector4::operator*(float uniformScale)
{
	return Vector4(x*uniformScale, y*uniformScale,z*uniformScale,w*uniformScale);
}

const Vector4 Vector4::operator-( const Vector4& vecToSubtract ) const
{
	return Vector4(x-vecToSubtract.x, y-vecToSubtract.y,z-vecToSubtract.z,w-vecToSubtract.w); // #MP1Fixme
}



//////////////////////////////////////////////////////////////
/*DATE    : 2018/05/07
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
const Vector4 Vector4::operator+(const Vector4& vecToSubtract) const
{
	return Vector4(x + vecToSubtract.x, y + vecToSubtract.y, z + vecToSubtract.z, w + vecToSubtract.w);
}

//////////////////////////////////////////////////////////////
/*DATE    : 2018/04/18
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
/*
bool Vector4::operator == (const Vector4 vectorToEqual)
{
	if(x == vectorToEqual.x && y == vectorToEqual.y && z == vectorToEqual.z && w == vectorToEqual.w)
	{
		return true;
	}
	return false;
}*/

//////////////////////////////////////////////////////////////
/*DATE    : 2018/05/01
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Vector4::operator/=(const float uniformScale)
{
	x /= uniformScale;
	y /= uniformScale;
	z /= uniformScale;
	w /= uniformScale;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Vector4::operator==(const Vector4& vectorB)
{
	if(x == vectorB.x && y== vectorB.y && z == vectorB.z && w == vectorB.w)
	{
		return true;
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Vector4::operator!=(const Vector4& vectorB)
{
	if (x == vectorB.x && y == vectorB.y && z == vectorB.z && w == vectorB.w)
	{
		return false;
	}
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/24
*@purpose : NIL
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Vector4::operator=(const Vector4& vectorB)
{
	x = vectorB.x;
	y = vectorB.y;
	z = vectorB.z;
	w = vectorB.w;
}

const Vector4 operator *(float uniformscale,const Vector4& value)
{
	return Vector4(value.x*uniformscale, value.y*uniformscale, value.z*uniformscale, value.w*uniformscale);
}

//////////////////////////////////////////////////////////////
/*DATE    : 2018/04/18
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
bool Vector4::SetFromText(const char* text)
{
	std::string value;
	value.append(text);
	size_t index = value.find_first_of(',', 0);
	size_t zindex = value.find_first_of(',', index + 1);
	size_t windex = value.find_first_of(',', zindex + 1);
	std::string xValue = value.substr(0, index);
	std::string yValue = value.substr(index + 1, zindex);
	std::string zValue = value.substr(zindex + 1, windex);
	std::string wValue = value.substr(windex + 1, value.length());

	float tempx = 0.f;
	float tempy = 0.f;
	float tempz = 0.f;
	float tempw = 0.0f;
	if (ToFloat(xValue, &tempx))
	{
		if (ToFloat(yValue, &tempy))
		{
			if (ToFloat(zValue, &tempz))
			{
				if(ToFloat(wValue,&tempw))
				{
					x = tempx;
					y = tempy;
					z = tempz;
					w = tempw;
					return true;
				}
			}
		}
	}
	return false;
}

//////////////////////////////////////////////////////////////
/*DATE    : 2018/04/16
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
Vector3 Vector4::XYZ()
{
	return Vector3(x, y, z);
}

//////////////////////////////////////////////////////////////
/*DATE    : 2018/04/19
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
float Vector4::GetLength()
{
	return sqrtf((float)((x*x) + (y*y) + (z*z) + (w*w)));
}

//////////////////////////////////////////////////////////////
/*DATE    : 2018/04/19
*@purpose : NIL
*
*@param   : NIL
*
*@return  : NIL
*/
//////////////////////////////////////////////////////////////
void Vector4::Normalize()
{
	float length = GetLength();
	x = x / length;
	y = y / length;
	z = z / length;
	w = w / length;
}

void Vector4::operator*=( const float uniformScale )
{
	x*=uniformScale;
	y*=uniformScale;
	z*=uniformScale;
	w*=uniformScale;
}
