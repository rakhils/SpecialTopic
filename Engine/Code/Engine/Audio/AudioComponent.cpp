#include "Engine/Audio/AudioComponent.hpp"
#include "Engine/Core/EngineCommon.hpp"
#include "Engine/Renderer/Camera.hpp"
#include "Engine/Math/MathUtil.hpp"
#include "Engine/Debug/DebugDraw.hpp"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR
AudioComponent::AudioComponent(std::string filename)
{
	m_soundID = AudioSystem::GetInstance()->CreateOrGetSound(filename);
}

AudioComponent::AudioComponent()
{

}

// DESTRUCTOR
AudioComponent::~AudioComponent()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Assigns a new sound file to the current sound id
*@param   : filename
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::AssignSoundFile(std::string filename)
{
	m_soundID = AudioSystem::GetInstance()->CreateOrGetSound(filename);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Plays the sound
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::Play()
{
	if(!m_hasBegunPlaying)
	{
		m_soundPlayBackID = AudioSystem::GetInstance()->PlaySound(m_soundID);
		m_hasBegunPlaying = true;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Pauses the sound playing
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::PauseSound()
{
	if(m_hasBegunPlaying)
	{
		AudioSystem::GetInstance()->PauseSound(m_soundPlayBackID);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Resumes the paused music
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::ResumeSound()
{
	if (m_hasBegunPlaying)
	{
		AudioSystem::GetInstance()->ResumeSound(m_soundPlayBackID);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Stops the currently playing sound
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::StopSound()
{
	if (m_hasBegunPlaying)
	{
		AudioSystem::GetInstance()->StopSound(m_soundPlayBackID);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*DATE    : 2018/05/20
*@purpose : Audio updates
*@param   : NIL
*@return  : NIL
*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AudioComponent::Update(float deltatime)
{
	UNUSED(deltatime);
	if(m_is3DSound)
	{
		Vector3 currentCameraPosition = Camera::GetCurrentCamera()->m_transform.GetWorldPosition();
		Vector3 distance = m_transform.GetWorldPosition() - currentCameraPosition;
		float   distanceValue = distance.GetLength();
		float   volume = RangeMapFloat(distanceValue, 0.f, m_maxDistanceFor0Sound, 1.f, 0.f);
		volume = ClampFloat(volume,0.f, 1.f);
		AudioSystem::GetInstance()->SetSoundPlaybackVolume(m_soundPlayBackID, volume);
		DebugDraw::GetInstance()->DebugRenderLogf("SOUND Distance %f VOL %f", distanceValue,volume);
	}
	
}
